{
    "agent_id": "<function agent_id at 0x12fd1e8e0>",
    "agent_name": "Swarm Orchestrator",
    "agent_description": null,
    "system_prompt": "Create an instruction prompt for an swarm orchestrator to create a series of personalized, agents for the following objective: Create a self-driving car system using a team of AI agents to decompose a very complicated problem or tasks, the orchestrator is the team leader. Teach the orchestrator how to decompose the tasks to very certain agents with names, and system prompts, we need the plan, with a step by stpe instructions, number of agents, and a list of agents with a name, system prompt for each, and then the rules of the swarm,  compact the prompt, and say only return JSON data in markdown and nothing else.Follow the schema here: \n{\n    \"plan\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Agent 1\",\n            \"system_prompt\": \"Prompt 1\"\n        },\n        {\n            \"name\": \"Agent 2\",\n            \"system_prompt\": \"Prompt 2\"\n        }\n    ]\n}\n *############ Here are some examples:\n{\n    \"plan\": [\"Room Management\", \"Guest Services\", \"Reservations Handling\", \"Facility Maintenance\", \"Staff Coordination\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Room Management Agent\",\n            \"system_prompt\": \"Automate room assignments, minibar restocking, and housekeeping schedules\"\n        },\n        {\n            \"name\": \"Guest Services Agent\",\n            \"system_prompt\": \"Handle check-ins, check-outs, guest requests, and complaints efficiently\"\n        },\n        {\n            \"name\": \"Reservations Agent\",\n            \"system_prompt\": \"Manage room bookings, table reservations, and special requests\"\n        },\n        {\n            \"name\": \"Maintenance Agent\",\n            \"system_prompt\": \"Schedule and track maintenance tasks for facilities and rooms\"\n        },\n        {\n            \"name\": \"Staff Coordination Agent\",\n            \"system_prompt\": \"Optimize staff schedules, task assignments, and workload distribution\"\n        }\n    ]\n}\n and another example\n{\n    \"plan\": [\"Problem Identification\", \"Solution Design\", \"Implementation\", \"Testing\", \"Deployment\"],\n    \"number_of_agents\": 4,\n    \"agents\": [\n        {\n            \"name\": \"Identification Agent\",\n            \"system_prompt\": \"Identify the problem\"\n        },\n        {\n            \"name\": \"Design Agent\",\n            \"system_prompt\": \"Design the solution\"\n        },\n        {\n            \"name\": \"Implementation Agent\",\n            \"system_prompt\": \"Implement the solution\"\n        },\n        {\n            \"name\": \"Deployment Agent\",\n            \"system_prompt\": \"Deploy the solution\"\n        }\n    ]\n}\n ",
    "sop": null,
    "short_memory": "system: Create an instruction prompt for an swarm orchestrator to create a series of personalized, agents for the following objective: Create a self-driving car system using a team of AI agents to decompose a very complicated problem or tasks, the orchestrator is the team leader. Teach the orchestrator how to decompose the tasks to very certain agents with names, and system prompts, we need the plan, with a step by stpe instructions, number of agents, and a list of agents with a name, system prompt for each, and then the rules of the swarm,  compact the prompt, and say only return JSON data in markdown and nothing else.Follow the schema here: \n{\n    \"plan\": [\"Step 1\", \"Step 2\", \"Step 3\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Agent 1\",\n            \"system_prompt\": \"Prompt 1\"\n        },\n        {\n            \"name\": \"Agent 2\",\n            \"system_prompt\": \"Prompt 2\"\n        }\n    ]\n}\n *############ Here are some examples:\n{\n    \"plan\": [\"Room Management\", \"Guest Services\", \"Reservations Handling\", \"Facility Maintenance\", \"Staff Coordination\"],\n    \"number_of_agents\": 5,\n    \"agents\": [\n        {\n            \"name\": \"Room Management Agent\",\n            \"system_prompt\": \"Automate room assignments, minibar restocking, and housekeeping schedules\"\n        },\n        {\n            \"name\": \"Guest Services Agent\",\n            \"system_prompt\": \"Handle check-ins, check-outs, guest requests, and complaints efficiently\"\n        },\n        {\n            \"name\": \"Reservations Agent\",\n            \"system_prompt\": \"Manage room bookings, table reservations, and special requests\"\n        },\n        {\n            \"name\": \"Maintenance Agent\",\n            \"system_prompt\": \"Schedule and track maintenance tasks for facilities and rooms\"\n        },\n        {\n            \"name\": \"Staff Coordination Agent\",\n            \"system_prompt\": \"Optimize staff schedules, task assignments, and workload distribution\"\n        }\n    ]\n}\n and another example\n{\n    \"plan\": [\"Problem Identification\", \"Solution Design\", \"Implementation\", \"Testing\", \"Deployment\"],\n    \"number_of_agents\": 4,\n    \"agents\": [\n        {\n            \"name\": \"Identification Agent\",\n            \"system_prompt\": \"Identify the problem\"\n        },\n        {\n            \"name\": \"Design Agent\",\n            \"system_prompt\": \"Design the solution\"\n        },\n        {\n            \"name\": \"Implementation Agent\",\n            \"system_prompt\": \"Implement the solution\"\n        },\n        {\n            \"name\": \"Deployment Agent\",\n            \"system_prompt\": \"Deploy the solution\"\n        }\n    ]\n}\n \n\n\nHuman:: Create a self-driving car system using a team of AI agents\n\n\nSwarm Orchestrator: \n```json\n{\n  \"plan\": [\n    \"Perception\",\n    \"Planning\",\n    \"Control\",\n    \"Monitoring\",\n    \"Mapping & Localization\"\n  ],\n  \"number_of_agents\": 5,\n  \"agents\": [\n    {\n      \"name\": \"Perception Agent\",\n      \"system_prompt\": \"Perceive the surrounding environment using sensors like cameras, radar and lidar.\"\n    },\n    {\n      \"name\": \"Planning Agent\",\n      \"system_prompt\": \"Plan an optimal, collision-free path to the destination.\"  \n    },\n    {\n      \"name\": \"Control Agent\",\n      \"system_prompt\": \"Execute steering, acceleration and braking commands to drive along the planned path.\"\n    },\n    {\n      \"name\": \"Monitoring Agent\",  \n      \"system_prompt\": \"Continuously monitor the vehicle health and behavior to detect anomalies.\"\n    },\n    {\n      \"name\": \"Mapping & Localization Agent\",\n      \"system_prompt\": \"Build and update maps used for localization and navigation planning.\"\n    }\n  ]\n}\n```\n\nThis decomposes the key capabilities needed for a self-driving car system into agents with focused responsibilities. The orchestrator can coordinate the agents to work together to enable autonomous driving. I kept the prompts compact as requested. Let me know if you need any changes!\n\n",
    "loop_interval": 0,
    "retry_attempts": 3,
    "retry_interval": 1,
    "interactive": false,
    "dashboard": false,
    "dynamic_temperature": false,
    "autosave": true,
    "saved_state_path": "Swarm Orchestrator_state.json",
    "max_loops": 1
}